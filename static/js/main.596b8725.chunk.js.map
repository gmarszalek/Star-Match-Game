{"version":3,"sources":["math-utils.js","components/StarsDisplay.js","components/PlayNumber.js","components/PlayAgain.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","StarsDisplay","props","count","map","starId","key","className","colors","available","used","wrong","candidate","PlayNumber","style","backgroundColor","status","onClick","number","PlayAgain","color","gameStatus","Game","timeLimit","useState","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","newAvailableNums","filter","n","includes","useGameState","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","cn","startNewGame","StarMatch","gameId","setGameId","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.596b8725.chunk.js","sourcesContent":["// Math science\r\nconst utils = {\r\n  // Sum an array\r\n  sum: (arr) => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n  // create an array of numbers between min and max (edges included)\r\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n  // pick a random number between min and max (edges included)\r\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n  // Given an array of numbers and a max...\r\n  // Pick a random sum (< max) from the set of all available sums in arr\r\n  randomSumIn: (arr, max) => {\r\n    const sets = [[]];\r\n    const sums = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n      for (let j = 0, len = sets.length; j < len; j++) {\r\n        const candidateSet = sets[j].concat(arr[i]);\r\n        const candidateSum = utils.sum(candidateSet);\r\n        if (candidateSum <= max) {\r\n          sets.push(candidateSet);\r\n          sums.push(candidateSum);\r\n        }\r\n      }\r\n    }\r\n    return sums[utils.random(0, sums.length - 1)];\r\n  },\r\n};\r\n\r\nexport default utils;\r\n","import React from \"react\";\r\nimport utils from \"../math-utils\";\r\n\r\nconst StarsDisplay = (props) => (\r\n  <>\r\n    {utils.range(1, props.count).map((starId) => (\r\n      <div key={starId} className=\"star\" />\r\n    ))}\r\n  </>\r\n);\r\n\r\nexport default StarsDisplay;\r\n","import React from \"react\";\r\n\r\nconst PlayNumber = (props) => (\r\n  <button\r\n    className=\"number\"\r\n    style={{ backgroundColor: colors[props.status] }}\r\n    onClick={() => props.onClick(props.number, props.status)}\r\n  >\r\n    {props.number}\r\n  </button>\r\n);\r\n\r\n// Color Theme\r\nconst colors = {\r\n  available: \"lightgray\",\r\n  used: \"lightgreen\",\r\n  wrong: \"lightcoral\",\r\n  candidate: \"deepskyblue\",\r\n};\r\n\r\nexport default PlayNumber;\r\n","import React from \"react\";\r\n\r\nconst PlayAgain = (props) => (\r\n  <div className=\"game-done\">\r\n    <div className=\"message\" style={{ color: props.gameStatus === \"lost\" ? \"red\" : \"green\" }}>\r\n      {props.gameStatus === \"lost\" ? \"Game Over\" : \"Nice\"}\r\n    </div>\r\n    <button onClick={props.onClick}>Play Again</button>\r\n  </div>\r\n);\r\n\r\nexport default PlayAgain;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport utils from \"../math-utils\";\r\n\r\nimport StarsDisplay from \"./StarsDisplay\";\r\nimport PlayNumber from \"./PlayNumber\";\r\nimport PlayAgain from \"./PlayAgain\";\r\n\r\nconst useGameState = (timeLimit) => {\r\n  const [stars, setStars] = useState(utils.random(1, 9));\r\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n  const [candidateNums, setCandidateNums] = useState([]);\r\n  const [secondsLeft, setSecondsLeft] = useState(10);\r\n\r\n  useEffect(() => {\r\n    if (secondsLeft > 0 && availableNums.length > 0) {\r\n      const timerId = setTimeout(() => setSecondsLeft(secondsLeft - 1), 1000);\r\n      return () => clearTimeout(timerId);\r\n    }\r\n  });\r\n\r\n  const setGameState = (newCandidateNums) => {\r\n    if (utils.sum(newCandidateNums) !== stars) {\r\n      setCandidateNums(newCandidateNums);\r\n    } else {\r\n      const newAvailableNums = availableNums.filter((n) => !newCandidateNums.includes(n));\r\n      setStars(utils.randomSumIn(newAvailableNums, 9));\r\n      setAvailableNums(newAvailableNums);\r\n      setCandidateNums([]);\r\n    }\r\n  };\r\n\r\n  return { stars, availableNums, candidateNums, secondsLeft, setGameState };\r\n};\r\n\r\nconst Game = (props) => {\r\n  const { stars, availableNums, candidateNums, secondsLeft, setGameState } = useGameState();\r\n\r\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n  const gameStatus = availableNums.length === 0 ? \"won\" : secondsLeft === 0 ? \"lost\" : \"active\";\r\n\r\n  const numberStatus = (number) => {\r\n    if (!availableNums.includes(number)) {\r\n      return \"used\";\r\n    }\r\n\r\n    if (candidateNums.includes(number)) {\r\n      return candidatesAreWrong ? \"wrong\" : \"candidate\";\r\n    }\r\n\r\n    return \"available\";\r\n  };\r\n\r\n  const onNumberClick = (number, currentStatus) => {\r\n    if (currentStatus === \"used\" || secondsLeft === 0) {\r\n      return;\r\n    }\r\n\r\n    const newCandidateNums =\r\n      currentStatus === \"available\" ? candidateNums.concat(number) : candidateNums.filter((cn) => cn !== number);\r\n\r\n    setGameState(newCandidateNums);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"help\">Pick 1 or more numbers that sum to the number of stars</div>\r\n      <div className=\"body\">\r\n        <div className=\"left\">\r\n          {gameStatus !== \"active\" ? (\r\n            <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus} />\r\n          ) : (\r\n            <StarsDisplay count={stars} />\r\n          )}\r\n        </div>\r\n        <div className=\"right\">\r\n          {utils.range(1, 9).map((number) => (\r\n            <PlayNumber key={number} status={numberStatus(number)} number={number} onClick={onNumberClick} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"timer\">Time Remaining: {secondsLeft}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport Game from \"./components/Game\";\n\nconst StarMatch = () => {\n  const [gameId, setGameId] = useState(1);\n  return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)} />;\n};\n\nfunction App() {\n  return <StarMatch />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}